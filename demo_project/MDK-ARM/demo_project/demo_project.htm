<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [demo_project\demo_project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image demo_project\demo_project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Wed Feb 05 16:59:17 2020
<BR><P>
<H3>Maximum Stack Usage =        572 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
forward_conv2d_nl_pool &rArr; ai_conv2d_stripe_f32 &rArr; ai_conv2d_kernel_f32 &rArr; ai_conv2d_kernel_group_f32
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">HardFault_Handler</a><BR>
 <LI><a href="#[12]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">PendSV_Handler</a><BR>
 <LI><a href="#[13]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">SysTick_Handler</a><BR>
 <LI><a href="#[26]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">ADC_IRQHandler</a><BR>
 <LI><a href="#[e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">BusFault_Handler</a><BR>
 <LI><a href="#[d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">MemManage_Handler</a><BR>
 <LI><a href="#[f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">UsageFault_Handler</a><BR>
 <LI><a href="#[16e]">pb_check_proto3_default_value</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16e]">pb_check_proto3_default_value</a><BR>
 <LI><a href="#[116]">pb_read</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[116]">pb_read</a><BR>
 <LI><a href="#[191]">pb_field_set_to_default</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[168]">pb_message_set_to_defaults</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[26]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[16]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[68]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[39]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[67]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[6a]">_core_inspect_forward_validate</a> from core_net_inspect.o(i._core_inspect_forward_validate) referenced from core_net_inspect.o(i._core_inspect_net_activations)
 <LI><a href="#[6b]">aiOnExecNode_cb</a> from aivalidation.o(i.aiOnExecNode_cb) referenced from aivalidation.o(i.aiInspectorInitAndBind)
 <LI><a href="#[6c]">aiPbBuffer_read_cb3</a> from aipbmgr.o(i.aiPbBuffer_read_cb3) referenced from aipbmgr.o(i.aiPbMgrReceiveAiBuffer3)
 <LI><a href="#[6d]">aiPbBuffer_write_cb3</a> from aipbmgr.o(i.aiPbBuffer_write_cb3) referenced from aipbmgr.o(i.aiPbMgrSendAiBuffer3)
 <LI><a href="#[8]">aiPbCmdNNInfo</a> from aivalidation.o(i.aiPbCmdNNInfo) referenced 2 times from aivalidation.o(.data)
 <LI><a href="#[9]">aiPbCmdNNRun</a> from aivalidation.o(i.aiPbCmdNNRun) referenced 2 times from aivalidation.o(.data)
 <LI><a href="#[6]">aiPbCmdSync</a> from aipbmgr.o(i.aiPbCmdSync) referenced 2 times from aivalidation.o(.data)
 <LI><a href="#[7]">aiPbCmdSysInfo</a> from aipbmgr.o(i.aiPbCmdSysInfo) referenced 2 times from aivalidation.o(.data)
 <LI><a href="#[74]">ai_network_create</a> from network.o(i.ai_network_create) referenced from app_x-cube-ai.o(.constdata)
 <LI><a href="#[72]">ai_network_data_weights_get</a> from network_data.o(i.ai_network_data_weights_get) referenced from app_x-cube-ai.o(.constdata)
 <LI><a href="#[76]">ai_network_destroy</a> from network.o(i.ai_network_destroy) referenced from app_x-cube-ai.o(.constdata)
 <LI><a href="#[79]">ai_network_forward</a> from network.o(i.ai_network_forward) referenced from app_x-cube-ai.o(.constdata)
 <LI><a href="#[75]">ai_network_get_error</a> from network.o(i.ai_network_get_error) referenced from app_x-cube-ai.o(.constdata)
 <LI><a href="#[73]">ai_network_get_info</a> from network.o(i.ai_network_get_info) referenced from app_x-cube-ai.o(.constdata)
 <LI><a href="#[77]">ai_network_init</a> from network.o(i.ai_network_init) referenced from app_x-cube-ai.o(.constdata)
 <LI><a href="#[78]">ai_network_run</a> from network.o(i.ai_network_run) referenced from app_x-cube-ai.o(.constdata)
 <LI><a href="#[71]">buf_read</a> from pb_decode.o(i.buf_read) referenced from pb_decode.o(i.pb_istream_from_buffer)
 <LI><a href="#[71]">buf_read</a> from pb_decode.o(i.buf_read) referenced from pb_decode.o(i.pb_read)
 <LI><a href="#[0]">forward_conv2d_nl_pool</a> from layers_conv2d_generic_float.o(i.forward_conv2d_nl_pool) referenced 2 times from network.o(.data)
 <LI><a href="#[3]">forward_dense</a> from layers_conv2d_generic_float.o(i.forward_dense) referenced 6 times from network.o(.data)
 <LI><a href="#[4]">forward_relu</a> from layers_nl_generic_float.o(i.forward_relu) referenced 4 times from network.o(.data)
 <LI><a href="#[5]">forward_sm</a> from layers_nl_generic_float.o(i.forward_sm) referenced 2 times from network.o(.data)
 <LI><a href="#[69]">fputc</a> from aitestutility.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[70]">func_dummy</a> from layers_conv2d_generic_float.o(i.func_dummy) referenced from layers_conv2d_generic_float.o(i.forward_conv2d_nl_pool)
 <LI><a href="#[65]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1]">nl_func_relu_array_f32</a> from layers_nl_generic_float.o(i.nl_func_relu_array_f32) referenced 2 times from network.o(.data)
 <LI><a href="#[6e]">nn_inputs_w_cb</a> from aipbmgr.o(i.nn_inputs_w_cb) referenced from aipbmgr.o(i.aiPbMgrSendNNInfo)
 <LI><a href="#[6f]">nn_outputs_w_cb</a> from aipbmgr.o(i.nn_outputs_w_cb) referenced from aipbmgr.o(i.aiPbMgrSendNNInfo)
 <LI><a href="#[81]">pb_dec_bytes</a> from pb_decode.o(i.pb_dec_bytes) referenced from pb_decode.o(.constdata)
 <LI><a href="#[7f]">pb_dec_fixed32</a> from pb_decode.o(i.pb_dec_fixed32) referenced from pb_decode.o(.constdata)
 <LI><a href="#[80]">pb_dec_fixed64</a> from pb_decode.o(i.pb_dec_fixed64) referenced from pb_decode.o(.constdata)
 <LI><a href="#[84]">pb_dec_fixed_length_bytes</a> from pb_decode.o(i.pb_dec_fixed_length_bytes) referenced from pb_decode.o(.constdata)
 <LI><a href="#[82]">pb_dec_string</a> from pb_decode.o(i.pb_dec_string) referenced from pb_decode.o(.constdata)
 <LI><a href="#[83]">pb_dec_submessage</a> from pb_decode.o(i.pb_dec_submessage) referenced from pb_decode.o(.constdata)
 <LI><a href="#[7e]">pb_dec_svarint</a> from pb_decode.o(i.pb_dec_svarint) referenced from pb_decode.o(.constdata)
 <LI><a href="#[7d]">pb_dec_uvarint</a> from pb_decode.o(i.pb_dec_uvarint) referenced from pb_decode.o(.constdata)
 <LI><a href="#[7c]">pb_dec_varint</a> from pb_decode.o(i.pb_dec_varint) referenced from pb_decode.o(.constdata)
 <LI><a href="#[8a]">pb_enc_bytes</a> from pb_encode.o(i.pb_enc_bytes) referenced from pb_encode.o(.constdata)
 <LI><a href="#[88]">pb_enc_fixed32</a> from pb_encode.o(i.pb_enc_fixed32) referenced from pb_encode.o(.constdata)
 <LI><a href="#[89]">pb_enc_fixed64</a> from pb_encode.o(i.pb_enc_fixed64) referenced from pb_encode.o(.constdata)
 <LI><a href="#[8d]">pb_enc_fixed_length_bytes</a> from pb_encode.o(i.pb_enc_fixed_length_bytes) referenced from pb_encode.o(.constdata)
 <LI><a href="#[8b]">pb_enc_string</a> from pb_encode.o(i.pb_enc_string) referenced from pb_encode.o(.constdata)
 <LI><a href="#[8c]">pb_enc_submessage</a> from pb_encode.o(i.pb_enc_submessage) referenced from pb_encode.o(.constdata)
 <LI><a href="#[87]">pb_enc_svarint</a> from pb_encode.o(i.pb_enc_svarint) referenced from pb_encode.o(.constdata)
 <LI><a href="#[86]">pb_enc_uvarint</a> from pb_encode.o(i.pb_enc_uvarint) referenced from pb_encode.o(.constdata)
 <LI><a href="#[85]">pb_enc_varint</a> from pb_encode.o(i.pb_enc_varint) referenced from pb_encode.o(.constdata)
 <LI><a href="#[2]">pool_func_mp_array_f32</a> from layers_pool_generic_float.o(i.pool_func_mp_array_f32) referenced 2 times from network.o(.data)
 <LI><a href="#[7b]">read_callback</a> from aitestutility.o(i.read_callback) referenced from aitestutility.o(.constdata)
 <LI><a href="#[7a]">write_callback</a> from aitestutility.o(i.write_callback) referenced from aitestutility.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[67]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[193]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[8e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a1]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[194]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[195]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[196]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[197]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[198]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[199]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbStrCopy
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbBuffer_read_cb3
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_output
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_input
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_set_to_default
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialize_signature_buffer_
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_forward_validate
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_info
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_get_private_handle
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_create
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_bind_network
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInspectorInitAndBind
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiBootstrap
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_ostream_to_uart
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_inspect_get_report
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_forward_validate
</UL>

<P><STRONG><a name="[19a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_set_to_default
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_fixed_length_bytes
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_static_field
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_create
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_submessage
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_array
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[102]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_is_valid
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiExecCtx
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbStrCopy
</UL>

<P><STRONG><a name="[138]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_check_custom_types
</UL>

<P><STRONG><a name="[103]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_is_valid
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiExecCtx
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_ul2f</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ffltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_ul2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwtCyclesToFloatMs
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPrintLayoutBuffer
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[19f]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1a2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1a3]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9a]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1a4]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>

<P><STRONG><a name="[a2]"></a>HAL_CRC_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>

<P><STRONG><a name="[a3]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, crc.o(i.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[b3]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationProcess
</UL>

<P><STRONG><a name="[bb]"></a>HAL_GPIO_Init</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[c3]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>HAL_GetDEVID</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetDEVID))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logDeviceConf
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdSysInfo
</UL>

<P><STRONG><a name="[17e]"></a>HAL_GetHalVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetHalVersion))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logDeviceConf
</UL>

<P><STRONG><a name="[17c]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logDeviceConf
</UL>

<P><STRONG><a name="[a5]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[a6]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a9]"></a>HAL_MspInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[bc]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[ab]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[a7]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ad]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[121]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logDeviceConf
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwtCyclesToFloatMs
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdSysInfo
</UL>

<P><STRONG><a name="[cc]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[cb]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ae]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdSysInfo
</UL>

<P><STRONG><a name="[af]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 834 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[aa]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[b4]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[b0]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_UART_MspInit</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[bd]"></a>HAL_UART_Receive</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_packet
</UL>

<P><STRONG><a name="[ca]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[bf]"></a>HAL_UART_Transmit</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_packet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_callback
</UL>

<P><STRONG><a name="[b6]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>MX_CRC_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, crc.o(i.MX_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_CRC_Init &rArr; HAL_CRC_Init &rArr; HAL_CRC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>MX_GPIO_Init</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>MX_X_CUBE_AI_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_x-cube-ai.o(i.MX_X_CUBE_AI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_X_CUBE_AI_Init &rArr; aiValidationInit &rArr; aiPbMgrInit &rArr; pb_ostream_to_uart
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationInit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>MX_X_CUBE_AI_Process</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_x-cube-ai.o(i.MX_X_CUBE_AI_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = MX_X_CUBE_AI_Process &rArr; aiValidationProcess &rArr; aiPbMgrWaitAndProcess &rArr; pb_decode_delimited &rArr; pb_decode &rArr; pb_decode_noinit &rArr; decode_field &rArr; decode_static_field &rArr; pb_message_set_to_defaults &rArr; pb_field_set_to_default &rArr;  pb_message_set_to_defaults (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>SystemClock_Config</STRONG> (Thumb, 124 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a6]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[f8]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationProcess
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiBootstrap
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logDeviceConf
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crcIpInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiTestHeader
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPrintNetworkInfo
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiLogErr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPrintLayoutBuffer
</UL>

<P><STRONG><a name="[1a7]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1a8]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[d4]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[15a]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_mem_free_
</UL>

<P><STRONG><a name="[cf]"></a>__hardfp_expf</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_expf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_sm_channel_f32
</UL>

<P><STRONG><a name="[1a9]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[d5]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_mem_alloc
</UL>

<P><STRONG><a name="[d2]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[d3]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[d1]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[1aa]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1ab]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1ac]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[d0]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[6a]"></a>_core_inspect_forward_validate</STRONG> (Thumb, 874 bytes, Stack size 128 bytes, core_net_inspect.o(i._core_inspect_forward_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = _core_inspect_forward_validate &rArr; _core_inspect_snapshot_push &rArr; _core_inspect_snapshot_init_report_node &rArr; _core_inspect_set_buffer &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layer_type_is_valid
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_byte_size
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_stop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_start
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_reset
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_snapshot_push
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_set_buffer
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_array_flags_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> core_net_inspect.o(i._core_inspect_net_activations)
</UL>
<P><STRONG><a name="[131]"></a>aiBufferSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, aitestutility.o(i.aiBufferSize))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPrintNetworkInfo
</UL>

<P><STRONG><a name="[fa]"></a>aiLogErr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, aitestutility.o(i.aiLogErr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = aiLogErr &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiBootstrap
</UL>

<P><STRONG><a name="[11a]"></a>aiPbAiBufferSize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, aipbmgr.o(i.aiPbAiBufferSize))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAiBuffer3
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrReceiveAiBuffer3
</UL>

<P><STRONG><a name="[8]"></a>aiPbCmdNNInfo</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, aivalidation.o(i.aiPbCmdNNInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = aiPbCmdNNInfo &rArr; aiPbMgrSendNNInfo &rArr; aiPbMgrSendResp &rArr; pb_encode &rArr; encode_field &rArr; encode_basic_field &rArr; encode_array &rArr; pb_encode_tag_for_field &rArr; pb_encode_tag &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiExecCtx
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendNNInfo
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aivalidation.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>aiPbCmdNNRun</STRONG> (Thumb, 462 bytes, Stack size 128 bytes, aivalidation.o(i.aiPbCmdNNRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = aiPbCmdNNRun &rArr; aiPbMgrReceiveAiBuffer3 &rArr; aiPbMgrWaitAck &rArr; pb_decode_delimited &rArr; pb_decode &rArr; pb_decode_noinit &rArr; decode_field &rArr; decode_static_field &rArr; pb_message_set_to_defaults &rArr; pb_field_set_to_default &rArr;  pb_message_set_to_defaults (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_run
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_get_error
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_destroy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInspectorUnBind
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInspectorSendReport
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInspectorInitAndBind
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiExecCtx
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restoreInts
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwtReset
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwtGetCycles
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwtCyclesToFloatMs
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableInts
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiLogErr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAiBuffer3
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAck
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrReceiveAiBuffer3
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbAiBufferSize
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aivalidation.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>aiPbCmdSync</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aipbmgr.o(i.aiPbCmdSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = aiPbCmdSync &rArr; aiPbMgrSendResp &rArr; pb_encode &rArr; encode_field &rArr; encode_basic_field &rArr; encode_array &rArr; pb_encode_tag_for_field &rArr; pb_encode_tag &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendResp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aivalidation.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>aiPbCmdSysInfo</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, aipbmgr.o(i.aiPbCmdSysInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = aiPbCmdSysInfo &rArr; aiPbMgrSendResp &rArr; pb_encode &rArr; encode_field &rArr; encode_basic_field &rArr; encode_array &rArr; pb_encode_tag_for_field &rArr; pb_encode_tag &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDEVID
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashCacheConf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendResp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aivalidation.o(.data)
</UL>
<P><STRONG><a name="[123]"></a>aiPbMgrInit</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, aipbmgr.o(i.aiPbMgrInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aiPbMgrInit &rArr; pb_ostream_to_uart
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_ostream_to_uart
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_istream_from_uart
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationInit
</UL>

<P><STRONG><a name="[11b]"></a>aiPbMgrReceiveAiBuffer3</STRONG> (Thumb, 114 bytes, Stack size 88 bytes, aipbmgr.o(i.aiPbMgrReceiveAiBuffer3))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = aiPbMgrReceiveAiBuffer3 &rArr; aiPbMgrWaitAck &rArr; pb_decode_delimited &rArr; pb_decode &rArr; pb_decode_noinit &rArr; decode_field &rArr; decode_static_field &rArr; pb_message_set_to_defaults &rArr; pb_field_set_to_default &rArr;  pb_message_set_to_defaults (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_delimited
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioFlushRead
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrWaitAck
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAck
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbAiBufferSize
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
</UL>

<P><STRONG><a name="[110]"></a>aiPbMgrSendAck</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aipbmgr.o(i.aiPbMgrSendAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = aiPbMgrSendAck &rArr; aiPbMgrSendResp &rArr; pb_encode &rArr; encode_field &rArr; encode_basic_field &rArr; encode_array &rArr; pb_encode_tag_for_field &rArr; pb_encode_tag &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendResp
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNInfo
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInspectorSendReport
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrWaitAndProcess
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrReceiveAiBuffer3
</UL>

<P><STRONG><a name="[115]"></a>aiPbMgrSendAiBuffer3</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, aipbmgr.o(i.aiPbMgrSendAiBuffer3))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = aiPbMgrSendAiBuffer3 &rArr; aiPbMgrWaitAck &rArr; pb_decode_delimited &rArr; pb_decode &rArr; pb_decode_noinit &rArr; decode_field &rArr; decode_static_field &rArr; pb_message_set_to_defaults &rArr; pb_field_set_to_default &rArr;  pb_message_set_to_defaults (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrWaitAck
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendResp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbAiBufferSize
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSetMetaInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiOnExecNode_cb
</UL>

<P><STRONG><a name="[119]"></a>aiPbMgrSendNNInfo</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, aipbmgr.o(i.aiPbMgrSendNNInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = aiPbMgrSendNNInfo &rArr; aiPbMgrSendResp &rArr; pb_encode &rArr; encode_field &rArr; encode_basic_field &rArr; encode_array &rArr; pb_encode_tag_for_field &rArr; pb_encode_tag &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbVersionToUint32
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbStrCopy
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendResp
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_aibuffer_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNInfo
</UL>

<P><STRONG><a name="[10e]"></a>aiPbMgrSendResp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, aipbmgr.o(i.aiPbMgrSendResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = aiPbMgrSendResp &rArr; pb_encode &rArr; encode_field &rArr; encode_basic_field &rArr; encode_array &rArr; pb_encode_tag_for_field &rArr; pb_encode_tag &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioFlushWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInspectorSendReport
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendNNInfo
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAiBuffer3
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAck
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdSysInfo
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdSync
</UL>

<P><STRONG><a name="[10f]"></a>aiPbMgrWaitAck</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, aipbmgr.o(i.aiPbMgrWaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = aiPbMgrWaitAck &rArr; pb_decode_delimited &rArr; pb_decode &rArr; pb_decode_noinit &rArr; decode_field &rArr; decode_static_field &rArr; pb_message_set_to_defaults &rArr; pb_field_set_to_default &rArr;  pb_message_set_to_defaults (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_delimited
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioFlushRead
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInspectorSendReport
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAiBuffer3
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrReceiveAiBuffer3
</UL>

<P><STRONG><a name="[12e]"></a>aiPbMgrWaitAndProcess</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, aipbmgr.o(i.aiPbMgrWaitAndProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = aiPbMgrWaitAndProcess &rArr; pb_decode_delimited &rArr; pb_decode &rArr; pb_decode_noinit &rArr; decode_field &rArr; decode_static_field &rArr; pb_message_set_to_defaults &rArr; pb_field_set_to_default &rArr;  pb_message_set_to_defaults (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_delimited
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioFlushRead
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAck
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationProcess
</UL>

<P><STRONG><a name="[129]"></a>aiPbStrCopy</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, aipbmgr.o(i.aiPbStrCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = aiPbStrCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendNNInfo
</UL>

<P><STRONG><a name="[12a]"></a>aiPbVersionToUint32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, aipbmgr.o(i.aiPbVersionToUint32))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendNNInfo
</UL>

<P><STRONG><a name="[fe]"></a>aiPrintNetworkInfo</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, aitestutility.o(i.aiPrintNetworkInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aiPrintNetworkInfo &rArr; aiPrintLayoutBuffer &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiBufferSize
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPrintLayoutBuffer
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiBootstrap
</UL>

<P><STRONG><a name="[132]"></a>aiTestHeader</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, aitestutility.o(i.aiTestHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aiTestHeader &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationInit
</UL>

<P><STRONG><a name="[c6]"></a>aiValidationInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, aivalidation.o(i.aiValidationInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = aiValidationInit &rArr; aiPbMgrInit &rArr; pb_ostream_to_uart
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logDeviceConf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwtIpInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crcIpInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiTestHeader
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
</UL>

<P><STRONG><a name="[c8]"></a>aiValidationProcess</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, aivalidation.o(i.aiValidationProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = aiValidationProcess &rArr; aiPbMgrWaitAndProcess &rArr; pb_decode_delimited &rArr; pb_decode &rArr; pb_decode_noinit &rArr; decode_field &rArr; decode_static_field &rArr; pb_message_set_to_defaults &rArr; pb_field_set_to_default &rArr;  pb_message_set_to_defaults (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioDisableWrite
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrWaitAndProcess
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
</UL>

<P><STRONG><a name="[dc]"></a>ai_array_get_byte_size</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ai_datatypes_format.o(i.ai_array_get_byte_size))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params_byte_size
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_forward_validate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_tensor_list
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_snapshot_init_report_node
</UL>

<P><STRONG><a name="[d8]"></a>ai_array_to_buffer_fmt</STRONG> (Thumb, 198 bytes, Stack size 12 bytes, ai_datatypes_format.o(i.ai_array_to_buffer_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ai_array_to_buffer_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_set_buffer
</UL>

<P><STRONG><a name="[137]"></a>ai_check_custom_types</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, layers.o(i.ai_check_custom_types))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ai_check_custom_types &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[174]"></a>ai_dict4_dot_array_f32</STRONG> (Thumb, 294 bytes, Stack size 20 bytes, layers_conv2d_generic_float.o(i.ai_dict4_dot_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ai_dict4_dot_array_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense
</UL>

<P><STRONG><a name="[173]"></a>ai_dict8_dot_array_f32</STRONG> (Thumb, 228 bytes, Stack size 20 bytes, layers_conv2d_generic_float.o(i.ai_dict8_dot_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ai_dict8_dot_array_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense
</UL>

<P><STRONG><a name="[172]"></a>ai_dict_decompress_f32</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, layers_conv2d_generic_float.o(i.ai_dict_decompress_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ai_dict_decompress_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d_nl_pool
</UL>

<P><STRONG><a name="[10b]"></a>ai_inspector_bind_network</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ai_network_inspector.o(i.ai_inspector_bind_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ai_inspector_bind_network &rArr; ai_network_inspect_init &rArr; core_utils_generate_network_signature &rArr; core_mem_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_mem_free
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_mem_alloc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_inspect_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInspectorInitAndBind
</UL>

<P><STRONG><a name="[109]"></a>ai_inspector_create</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, ai_network_inspector.o(i.ai_inspector_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ai_inspector_create
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_default_config
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_release
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInspectorInitAndBind
</UL>

<P><STRONG><a name="[107]"></a>ai_inspector_default_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ai_network_inspector.o(i.ai_inspector_default_config))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_create
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInspectorInitAndBind
</UL>

<P><STRONG><a name="[11e]"></a>ai_inspector_destroy</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ai_network_inspector.o(i.ai_inspector_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ai_inspector_destroy &rArr; _inspector_unbind_network &rArr; ai_network_inspect_destroy &rArr; core_mem_free &rArr; core_mem_free_ &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_inspector_unbind_network
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
</UL>

<P><STRONG><a name="[10d]"></a>ai_inspector_get_report</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ai_network_inspector.o(i.ai_inspector_get_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ai_inspector_get_report &rArr; ai_network_inspect_get_report &rArr; ai_platform_context_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_inspect_get_report
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_inspector_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInspectorSendReport
</UL>

<P><STRONG><a name="[111]"></a>ai_inspector_unbind_network</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ai_network_inspector.o(i.ai_inspector_unbind_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ai_inspector_unbind_network &rArr; _inspector_unbind_network &rArr; ai_network_inspect_destroy &rArr; core_mem_free &rArr; core_mem_free_ &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_inspector_unbind_network
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_inspector_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInspectorUnBind
</UL>

<P><STRONG><a name="[e0]"></a>ai_layer_type_is_valid</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, layers.o(i.ai_layer_type_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layer_type_name
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_forward_validate
</UL>

<P><STRONG><a name="[e5]"></a>ai_layer_type_name</STRONG> (Thumb, 162 bytes, Stack size 4 bytes, layers.o(i.ai_layer_type_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ai_layer_type_name
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layer_type_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_net_activations
</UL>

<P><STRONG><a name="[143]"></a>ai_layers_forward_all</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, layers.o(i.ai_layers_forward_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_layers_forward_all &rArr; ai_forward_layer
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_forward_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[f9]"></a>ai_mnetwork_create</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, app_x-cube-ai.o(i.ai_mnetwork_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ai_mnetwork_create &rArr; ai_mnetwork_is_valid &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_is_valid
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiBootstrap
</UL>

<P><STRONG><a name="[100]"></a>ai_mnetwork_destroy</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_x-cube-ai.o(i.ai_mnetwork_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_mnetwork_destroy
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiBootstrap
</UL>

<P><STRONG><a name="[105]"></a>ai_mnetwork_find</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_x-cube-ai.o(i.ai_mnetwork_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ai_mnetwork_find &rArr; ai_mnetwork_is_valid &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInit
</UL>

<P><STRONG><a name="[ff]"></a>ai_mnetwork_get_error</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_x-cube-ai.o(i.ai_mnetwork_get_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_mnetwork_get_error
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiBootstrap
</UL>

<P><STRONG><a name="[fb]"></a>ai_mnetwork_get_ext_data_activations</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_x-cube-ai.o(i.ai_mnetwork_get_ext_data_activations))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_mnetwork_get_ext_data_activations
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiBootstrap
</UL>

<P><STRONG><a name="[fd]"></a>ai_mnetwork_get_info</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_x-cube-ai.o(i.ai_mnetwork_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_mnetwork_get_info
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiBootstrap
</UL>

<P><STRONG><a name="[108]"></a>ai_mnetwork_get_private_handle</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_x-cube-ai.o(i.ai_mnetwork_get_private_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_mnetwork_get_private_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_handle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInspectorInitAndBind
</UL>

<P><STRONG><a name="[fc]"></a>ai_mnetwork_init</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, app_x-cube-ai.o(i.ai_mnetwork_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ai_mnetwork_init
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_handle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiBootstrap
</UL>

<P><STRONG><a name="[11d]"></a>ai_mnetwork_run</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_x-cube-ai.o(i.ai_mnetwork_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_mnetwork_run
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
</UL>

<P><STRONG><a name="[74]"></a>ai_network_create</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, network.o(i.ai_network_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ai_network_create &rArr; ai_platform_network_create &rArr; ai_check_custom_types &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_x-cube-ai.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>ai_network_data_weights_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, network_data.o(i.ai_network_data_weights_get))
<BR>[Address Reference Count : 1]<UL><LI> app_x-cube-ai.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>ai_network_destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, network.o(i.ai_network_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_network_destroy &rArr; ai_platform_network_destroy &rArr; ai_platform_context_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_x-cube-ai.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>ai_network_forward</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, network.o(i.ai_network_forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ai_network_forward &rArr; ai_platform_network_process &rArr; _platform_network_io_bind &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_x-cube-ai.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>ai_network_get_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, network.o(i.ai_network_get_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_network_get_error &rArr; ai_platform_network_get_error &rArr; ai_platform_context_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_x-cube-ai.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>ai_network_get_info</STRONG> (Thumb, 82 bytes, Stack size 128 bytes, network.o(i.ai_network_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = ai_network_get_info &rArr; ai_platform_api_get_network_report &rArr; _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_runtime_get_version
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_runtime_get_revision
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_interface_api_get_version
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_version
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_x-cube-ai.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>ai_network_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, network.o(i.ai_network_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ai_network_init &rArr; ai_platform_network_init &rArr; ai_platform_context_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_configure_weights
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_configure_activations
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_x-cube-ai.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>ai_network_inspect_destroy</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, core_net_inspect.o(i.ai_network_inspect_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ai_network_inspect_destroy &rArr; core_mem_free &rArr; core_mem_free_ &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_mem_free
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_snapshot_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_inspector_unbind_network
</UL>

<P><STRONG><a name="[142]"></a>ai_network_inspect_get_report</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, core_net_inspect.o(i.ai_network_inspect_get_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ai_network_inspect_get_report &rArr; ai_platform_context_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_get_report
</UL>

<P><STRONG><a name="[13f]"></a>ai_network_inspect_init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, core_net_inspect.o(i.ai_network_inspect_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ai_network_inspect_init &rArr; core_utils_generate_network_signature &rArr; core_mem_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_mem_alloc
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_utils_generate_network_signature
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_net_activations
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_bind_network
</UL>

<P><STRONG><a name="[78]"></a>ai_network_run</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, network.o(i.ai_network_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ai_network_run &rArr; ai_platform_network_process &rArr; _platform_network_io_bind &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_x-cube-ai.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>ai_platform_api_get_network_report</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, ai_platform_interface.o(i.ai_platform_api_get_network_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ai_platform_api_get_network_report &rArr; _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_runtime_get_version
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_interface_api_get_version
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_version
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_info
</UL>

<P><STRONG><a name="[14d]"></a>ai_platform_api_get_version</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_api_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_platform_api_get_version
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_info
</UL>

<P><STRONG><a name="[13e]"></a>ai_platform_context_acquire</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_context_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_platform_context_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_destroy
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_info
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_unbind_network
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_get_report
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_destroy
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_bind_network
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_inspect_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_inspect_get_report
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_inspect_destroy
</UL>

<P><STRONG><a name="[140]"></a>ai_platform_context_release</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ai_platform_interface.o(i.ai_platform_context_release))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_create
</UL>

<P><STRONG><a name="[14e]"></a>ai_platform_interface_api_get_version</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_interface_api_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_platform_interface_api_get_version
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_info
</UL>

<P><STRONG><a name="[147]"></a>ai_platform_network_create</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ai_platform_interface.o(i.ai_platform_network_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ai_platform_network_create &rArr; ai_check_custom_types &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_check_custom_types
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_create
</UL>

<P><STRONG><a name="[148]"></a>ai_platform_network_destroy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_network_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_platform_network_destroy &rArr; ai_platform_context_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_destroy
</UL>

<P><STRONG><a name="[14a]"></a>ai_platform_network_get_error</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_network_get_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_platform_network_get_error &rArr; ai_platform_context_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_get_error
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_error
</UL>

<P><STRONG><a name="[150]"></a>ai_platform_network_init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ai_platform_interface.o(i.ai_platform_network_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ai_platform_network_init &rArr; ai_platform_context_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_init
</UL>

<P><STRONG><a name="[149]"></a>ai_platform_network_process</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ai_platform_interface.o(i.ai_platform_network_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ai_platform_network_process &rArr; _platform_network_io_bind &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_forward_all
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_output
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_input
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_run
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_forward
</UL>

<P><STRONG><a name="[f1]"></a>ai_platform_network_set_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ai_platform_interface.o(i.ai_platform_network_set_error))
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[14b]"></a>ai_platform_runtime_get_revision</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_runtime_get_revision))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_platform_runtime_get_revision
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_info
</UL>

<P><STRONG><a name="[14c]"></a>ai_platform_runtime_get_version</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_runtime_get_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_platform_runtime_get_version
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_info
</UL>

<P><STRONG><a name="[156]"></a>core_get_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, core_common.o(i.core_get_error))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
</UL>

<P><STRONG><a name="[155]"></a>core_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_common.o(i.core_init))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[ea]"></a>core_mem_alloc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, core_mem_manager.o(i.core_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = core_mem_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_bind_network
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_inspect_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_utils_generate_network_signature
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_snapshot_push
</UL>

<P><STRONG><a name="[e9]"></a>core_mem_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, core_mem_manager.o(i.core_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = core_mem_free &rArr; core_mem_free_ &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_mem_free_
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_bind_network
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_inspect_destroy
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_inspector_unbind_network
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_utils_generate_network_signature
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_snapshot_push
</UL>

<P><STRONG><a name="[157]"></a>core_set_error</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, core_common.o(i.core_set_error))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
</UL>

<P><STRONG><a name="[e6]"></a>core_timer_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, core_benchmark.o(i.core_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = core_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_init_
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_net_activations
</UL>

<P><STRONG><a name="[15c]"></a>core_timer_init_</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, core_benchmark.o(i.core_timer_init_))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_init
</UL>

<P><STRONG><a name="[da]"></a>core_timer_reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, core_benchmark.o(i.core_timer_reset))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_forward_validate
</UL>

<P><STRONG><a name="[e1]"></a>core_timer_start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, core_benchmark.o(i.core_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = core_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_ticks_
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_forward_validate
</UL>

<P><STRONG><a name="[e2]"></a>core_timer_stop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, core_benchmark.o(i.core_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = core_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_ticks_
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_forward_validate
</UL>

<P><STRONG><a name="[15d]"></a>core_timer_ticks_</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_benchmark.o(i.core_timer_ticks_))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_stop
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_start
</UL>

<P><STRONG><a name="[15f]"></a>core_utils_compute_crc32</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, core_utils.o(i.core_utils_compute_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = core_utils_compute_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_utils_generate_network_signature
</UL>

<P><STRONG><a name="[153]"></a>core_utils_generate_network_signature</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, core_utils.o(i.core_utils_generate_network_signature))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = core_utils_generate_network_signature &rArr; core_mem_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_mem_free
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_mem_alloc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_utils_compute_crc32
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialize_signature_buffer_
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_inspect_init
</UL>

<P><STRONG><a name="[134]"></a>crcIpInit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, aitestutility.o(i.crcIpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = crcIpInit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationInit
</UL>

<P><STRONG><a name="[11c]"></a>disableInts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aitestutility.o(i.disableInts))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
</UL>

<P><STRONG><a name="[114]"></a>dwtCyclesToFloatMs</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, aitestutility.o(i.dwtCyclesToFloatMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dwtCyclesToFloatMs &rArr; __aeabi_ul2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiOnExecNode_cb
</UL>

<P><STRONG><a name="[112]"></a>dwtGetCycles</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aitestutility.o(i.dwtGetCycles))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiOnExecNode_cb
</UL>

<P><STRONG><a name="[133]"></a>dwtIpInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, aitestutility.o(i.dwtIpInit))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationInit
</UL>

<P><STRONG><a name="[113]"></a>dwtReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aitestutility.o(i.dwtReset))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiOnExecNode_cb
</UL>

<P><STRONG><a name="[0]"></a>forward_conv2d_nl_pool</STRONG> (Thumb, 1106 bytes, Stack size 288 bytes, layers_conv2d_generic_float.o(i.forward_conv2d_nl_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = forward_conv2d_nl_pool &rArr; ai_conv2d_stripe_f32 &rArr; ai_conv2d_kernel_f32 &rArr; ai_conv2d_kernel_group_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_dict_decompress_f32
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params_stride
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params_ptr
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params_byte_size
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_stripe_f32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>forward_dense</STRONG> (Thumb, 460 bytes, Stack size 68 bytes, layers_conv2d_generic_float.o(i.forward_dense))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = forward_dense &rArr; ai_dict8_dot_array_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_dict8_dot_array_f32
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_dict4_dot_array_f32
</UL>
<BR>[Address Reference Count : 3]<UL><LI> network.o(.data)
<LI> network.o(.data)
<LI> network.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>forward_relu</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, layers_nl_generic_float.o(i.forward_relu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = forward_relu &rArr; nl_func_relu_array_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_relu_array_f32
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_relu_thresholded_array_f32
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_relu_generic_array_f32
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_shape_get_size
</UL>
<BR>[Address Reference Count : 2]<UL><LI> network.o(.data)
<LI> network.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>forward_sm</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, layers_nl_generic_float.o(i.forward_sm))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = forward_sm &rArr; nl_func_sm_array_f32 &rArr; nl_func_sm_channel_f32 &rArr; __hardfp_expf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_sm_array_f32
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_shape_get_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, aitestutility.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[122]"></a>getFlashCacheConf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aitestutility.o(i.getFlashCacheConf))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdSysInfo
</UL>

<P><STRONG><a name="[136]"></a>ioDisableWrite</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, aitestutility.o(i.ioDisableWrite))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationProcess
</UL>

<P><STRONG><a name="[127]"></a>ioFlushRead</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, aitestutility.o(i.ioFlushRead))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrWaitAndProcess
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrWaitAck
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrReceiveAiBuffer3
</UL>

<P><STRONG><a name="[12d]"></a>ioFlushWrite</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aitestutility.o(i.ioFlushWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ioFlushWrite &rArr; write_packet &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendResp
</UL>

<P><STRONG><a name="[135]"></a>logDeviceConf</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, aitestutility.o(i.logDeviceConf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = logDeviceConf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetHalVersion
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDEVID
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devIdToStr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationInit
</UL>

<P><STRONG><a name="[65]"></a>main</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = main &rArr; MX_X_CUBE_AI_Process &rArr; aiValidationProcess &rArr; aiPbMgrWaitAndProcess &rArr; pb_decode_delimited &rArr; pb_decode &rArr; pb_decode_noinit &rArr; decode_field &rArr; decode_static_field &rArr; pb_message_set_to_defaults &rArr; pb_field_set_to_default &rArr;  pb_message_set_to_defaults (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1]"></a>nl_func_relu_array_f32</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, layers_nl_generic_float.o(i.nl_func_relu_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nl_func_relu_array_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_relu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network.o(.data)
</UL>
<P><STRONG><a name="[176]"></a>nl_func_relu_generic_array_f32</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, layers_nl_generic_float.o(i.nl_func_relu_generic_array_f32))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_relu
</UL>

<P><STRONG><a name="[177]"></a>nl_func_relu_thresholded_array_f32</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, layers_nl_generic_float.o(i.nl_func_relu_thresholded_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nl_func_relu_thresholded_array_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_relu
</UL>

<P><STRONG><a name="[178]"></a>nl_func_sm_array_f32</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, layers_nl_generic_float.o(i.nl_func_sm_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nl_func_sm_array_f32 &rArr; nl_func_sm_channel_f32 &rArr; __hardfp_expf
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_sm_channel_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_sm
</UL>

<P><STRONG><a name="[17f]"></a>nl_func_sm_channel_f32</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, layers_nl_generic_float.o(i.nl_func_sm_channel_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nl_func_sm_channel_f32 &rArr; __hardfp_expf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nl_func_sm_array_f32
</UL>

<P><STRONG><a name="[165]"></a>pb_close_string_substream</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pb_decode.o(i.pb_close_string_substream))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pb_close_string_substream &rArr; pb_read &rArr;  pb_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_read
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_delimited
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_submessage
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_static_field
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_callback_field
</UL>

<P><STRONG><a name="[187]"></a>pb_decode</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pb_decode.o(i.pb_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = pb_decode &rArr; pb_decode_noinit &rArr; decode_field &rArr; decode_static_field &rArr; pb_message_set_to_defaults &rArr; pb_field_set_to_default &rArr;  pb_message_set_to_defaults (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_noinit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_message_set_to_defaults
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_delimited
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_submessage
</UL>

<P><STRONG><a name="[126]"></a>pb_decode_delimited</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, pb_decode.o(i.pb_decode_delimited))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pb_decode_delimited &rArr; pb_decode &rArr; pb_decode_noinit &rArr; decode_field &rArr; decode_static_field &rArr; pb_message_set_to_defaults &rArr; pb_field_set_to_default &rArr;  pb_message_set_to_defaults (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_make_string_substream
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_close_string_substream
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrWaitAndProcess
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrWaitAck
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrReceiveAiBuffer3
</UL>

<P><STRONG><a name="[184]"></a>pb_decode_fixed32</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pb_decode.o(i.pb_decode_fixed32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pb_decode_fixed32 &rArr; pb_read &rArr;  pb_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_fixed32
</UL>

<P><STRONG><a name="[185]"></a>pb_decode_fixed64</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, pb_decode.o(i.pb_decode_fixed64))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pb_decode_fixed64 &rArr; pb_read &rArr;  pb_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_read
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_fixed64
</UL>

<P><STRONG><a name="[186]"></a>pb_decode_noinit</STRONG> (Thumb, 484 bytes, Stack size 160 bytes, pb_decode.o(i.pb_decode_noinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = pb_decode_noinit &rArr; decode_field &rArr; decode_static_field &rArr; pb_message_set_to_defaults &rArr; pb_field_set_to_default &rArr;  pb_message_set_to_defaults (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_next
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_find
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_begin
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_skip_field
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_tag
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_from_extension
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_field
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_submessage
</UL>

<P><STRONG><a name="[188]"></a>pb_decode_svarint</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, pb_decode.o(i.pb_decode_svarint))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pb_decode_svarint &rArr; pb_decode_varint &rArr; pb_readbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_svarint
</UL>

<P><STRONG><a name="[18a]"></a>pb_decode_tag</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, pb_decode.o(i.pb_decode_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pb_decode_tag &rArr; pb_decode_varint32_eof &rArr; pb_readbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint32_eof
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_noinit
</UL>

<P><STRONG><a name="[189]"></a>pb_decode_varint</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, pb_decode.o(i.pb_decode_varint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pb_decode_varint &rArr; pb_readbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_readbyte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_svarint
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_varint
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_uvarint
</UL>

<P><STRONG><a name="[183]"></a>pb_decode_varint32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pb_decode.o(i.pb_decode_varint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pb_decode_varint32 &rArr; pb_decode_varint32_eof &rArr; pb_readbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint32_eof
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_skip_field
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_make_string_substream
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_string
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_fixed_length_bytes
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_bytes
</UL>

<P><STRONG><a name="[12c]"></a>pb_encode</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, pb_encode.o(i.pb_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pb_encode &rArr; encode_field &rArr; encode_basic_field &rArr; encode_array &rArr; pb_encode_tag_for_field &rArr; pb_encode_tag &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_next
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_begin
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_field
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_submessage
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendResp
</UL>

<P><STRONG><a name="[18e]"></a>pb_encode_fixed32</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pb_encode.o(i.pb_encode_fixed32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pb_encode_fixed32 &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_write
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_enc_fixed32
</UL>

<P><STRONG><a name="[18f]"></a>pb_encode_fixed64</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pb_encode.o(i.pb_encode_fixed64))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pb_encode_fixed64 &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_write
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_enc_fixed64
</UL>

<P><STRONG><a name="[118]"></a>pb_encode_string</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pb_encode.o(i.pb_encode_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pb_encode_string &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_varint
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbBuffer_write_cb3
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_enc_string
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_enc_fixed_length_bytes
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_enc_bytes
</UL>

<P><STRONG><a name="[181]"></a>pb_encode_submessage</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, pb_encode.o(i.pb_encode_submessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pb_encode_submessage &rArr; pb_encode &rArr; encode_field &rArr; encode_basic_field &rArr; encode_array &rArr; pb_encode_tag_for_field &rArr; pb_encode_tag &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_varint
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nn_shape_w_cb
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_enc_submessage
</UL>

<P><STRONG><a name="[190]"></a>pb_encode_svarint</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pb_encode.o(i.pb_encode_svarint))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pb_encode_svarint &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_varint
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_enc_svarint
</UL>

<P><STRONG><a name="[16a]"></a>pb_encode_tag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pb_encode.o(i.pb_encode_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pb_encode_tag &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_varint
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_tag_for_field
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_array
</UL>

<P><STRONG><a name="[117]"></a>pb_encode_tag_for_field</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, pb_encode.o(i.pb_encode_tag_for_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pb_encode_tag_for_field &rArr; pb_encode_tag &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nn_shape_w_cb
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbBuffer_write_cb3
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_basic_field
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_array
</UL>

<P><STRONG><a name="[16b]"></a>pb_encode_varint</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, pb_encode.o(i.pb_encode_varint))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_write
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_submessage
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_string
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_tag
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_svarint
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_enc_varint
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_enc_uvarint
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_array
</UL>

<P><STRONG><a name="[17b]"></a>pb_field_iter_begin</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, pb_common.o(i.pb_field_iter_begin))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_next
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_check_proto3_default_value
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_noinit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_message_set_to_defaults
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_from_extension
</UL>

<P><STRONG><a name="[18b]"></a>pb_field_iter_find</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pb_common.o(i.pb_field_iter_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pb_field_iter_find &rArr; pb_field_iter_next
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_next
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_noinit
</UL>

<P><STRONG><a name="[182]"></a>pb_field_iter_next</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, pb_common.o(i.pb_field_iter_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pb_field_iter_next
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_begin
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_find
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_check_proto3_default_value
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_noinit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_message_set_to_defaults
</UL>

<P><STRONG><a name="[162]"></a>pb_istream_from_buffer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pb_decode.o(i.pb_istream_from_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pb_istream_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_callback_field
</UL>

<P><STRONG><a name="[124]"></a>pb_istream_from_uart</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aitestutility.o(i.pb_istream_from_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pb_istream_from_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrInit
</UL>

<P><STRONG><a name="[164]"></a>pb_make_string_substream</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pb_decode.o(i.pb_make_string_substream))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pb_make_string_substream &rArr; pb_decode_varint32 &rArr; pb_decode_varint32_eof &rArr; pb_readbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint32
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_delimited
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_submessage
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_static_field
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_callback_field
</UL>

<P><STRONG><a name="[125]"></a>pb_ostream_to_uart</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, aitestutility.o(i.pb_ostream_to_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pb_ostream_to_uart
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrInit
</UL>

<P><STRONG><a name="[116]"></a>pb_read</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, pb_decode.o(i.pb_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = pb_read &rArr;  pb_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_read
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_read
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbBuffer_read_cb3
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_skip_field
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_fixed64
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_fixed32
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_close_string_substream
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_raw_value
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_string
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_fixed_length_bytes
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_dec_bytes
</UL>

<P><STRONG><a name="[163]"></a>pb_skip_field</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, pb_decode.o(i.pb_skip_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pb_skip_field &rArr; pb_read &rArr;  pb_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_read
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint32
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_noinit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_callback_field
</UL>

<P><STRONG><a name="[16c]"></a>pb_write</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, pb_encode.o(i.pb_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pb_write
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_submessage
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_string
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_varint
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_fixed64
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_fixed32
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_array
</UL>

<P><STRONG><a name="[2]"></a>pool_func_mp_array_f32</STRONG> (Thumb, 424 bytes, Stack size 64 bytes, layers_pool_generic_float.o(i.pool_func_mp_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pool_func_mp_array_f32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network.o(.data)
</UL>
<P><STRONG><a name="[11f]"></a>restoreInts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aitestutility.o(i.restoreInts))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[152]"></a>network_configure_activations</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, network.o(i.network_configure_activations))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_init
</UL>

<P><STRONG><a name="[151]"></a>network_configure_weights</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, network.o(i.network_configure_weights))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_init
</UL>

<P><STRONG><a name="[145]"></a>ai_mnetwork_handle</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_x-cube-ai.o(i.ai_mnetwork_handle))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_run
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_get_private_handle
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_get_info
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_get_ext_data_activations
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_get_error
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_destroy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_create
</UL>

<P><STRONG><a name="[146]"></a>ai_mnetwork_is_valid</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_x-cube-ai.o(i.ai_mnetwork_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ai_mnetwork_is_valid &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_find
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_create
</UL>

<P><STRONG><a name="[ac]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[68]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[b2]"></a>UART_EndRxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>UART_Receive_IT</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>UART_SetConfig</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[b5]"></a>UART_Transmit_IT</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[6c]"></a>aiPbBuffer_read_cb3</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, aipbmgr.o(i.aiPbBuffer_read_cb3))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aiPbBuffer_read_cb3 &rArr; pb_read &rArr;  pb_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_read
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aipbmgr.o(i.aiPbMgrReceiveAiBuffer3)
</UL>
<P><STRONG><a name="[6d]"></a>aiPbBuffer_write_cb3</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, aipbmgr.o(i.aiPbBuffer_write_cb3))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = aiPbBuffer_write_cb3 &rArr; pb_encode_string &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_tag_for_field
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aipbmgr.o(i.aiPbMgrSendAiBuffer3)
</UL>
<P><STRONG><a name="[128]"></a>aiPbMgrSetMetaInfo</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, aipbmgr.o(i.aiPbMgrSetMetaInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aiPbMgrSetMetaInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAiBuffer3
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_aibuffer_msg
</UL>

<P><STRONG><a name="[12b]"></a>init_aibuffer_msg</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, aipbmgr.o(i.init_aibuffer_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_aibuffer_msg &rArr; aiPbMgrSetMetaInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSetMetaInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendNNInfo
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nn_shape_w_cb
</UL>

<P><STRONG><a name="[6e]"></a>nn_inputs_w_cb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aipbmgr.o(i.nn_inputs_w_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nn_inputs_w_cb &rArr; nn_shape_w_cb &rArr; pb_encode_submessage &rArr; pb_encode &rArr; encode_field &rArr; encode_basic_field &rArr; encode_array &rArr; pb_encode_tag_for_field &rArr; pb_encode_tag &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nn_shape_w_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aipbmgr.o(i.aiPbMgrSendNNInfo)
</UL>
<P><STRONG><a name="[6f]"></a>nn_outputs_w_cb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aipbmgr.o(i.nn_outputs_w_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nn_outputs_w_cb &rArr; nn_shape_w_cb &rArr; pb_encode_submessage &rArr; pb_encode &rArr; encode_field &rArr; encode_basic_field &rArr; encode_array &rArr; pb_encode_tag_for_field &rArr; pb_encode_tag &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nn_shape_w_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aipbmgr.o(i.aiPbMgrSendNNInfo)
</UL>
<P><STRONG><a name="[180]"></a>nn_shape_w_cb</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, aipbmgr.o(i.nn_shape_w_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nn_shape_w_cb &rArr; pb_encode_submessage &rArr; pb_encode &rArr; encode_field &rArr; encode_basic_field &rArr; encode_array &rArr; pb_encode_tag_for_field &rArr; pb_encode_tag &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_tag_for_field
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_submessage
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_aibuffer_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nn_outputs_w_cb
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nn_inputs_w_cb
</UL>

<P><STRONG><a name="[12f]"></a>aiPrintLayoutBuffer</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, aitestutility.o(i.aiPrintLayoutBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aiPrintLayoutBuffer &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPrintNetworkInfo
</UL>

<P><STRONG><a name="[17d]"></a>devIdToStr</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, aitestutility.o(i.devIdToStr))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logDeviceConf
</UL>

<P><STRONG><a name="[7b]"></a>read_callback</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, aitestutility.o(i.read_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = read_callback &rArr; read_packet &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_packet
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aitestutility.o(.constdata)
</UL>
<P><STRONG><a name="[192]"></a>read_packet</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, aitestutility.o(i.read_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = read_packet &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_callback
</UL>

<P><STRONG><a name="[7a]"></a>write_callback</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, aitestutility.o(i.write_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = write_callback &rArr; write_packet &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aitestutility.o(.constdata)
</UL>
<P><STRONG><a name="[179]"></a>write_packet</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, aitestutility.o(i.write_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = write_packet &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_callback
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioFlushWrite
</UL>

<P><STRONG><a name="[f7]"></a>aiBootstrap</STRONG> (Thumb, 220 bytes, Stack size 80 bytes, aivalidation.o(i.aiBootstrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = aiBootstrap &rArr; ai_mnetwork_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_get_info
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_get_ext_data_activations
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_get_error
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_destroy
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_create
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPrintNetworkInfo
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiLogErr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInit
</UL>

<P><STRONG><a name="[101]"></a>aiExecCtx</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, aivalidation.o(i.aiExecCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = aiExecCtx &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNInfo
</UL>

<P><STRONG><a name="[104]"></a>aiInit</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, aivalidation.o(i.aiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = aiInit &rArr; aiBootstrap &rArr; ai_mnetwork_init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_find
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiBootstrap
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiValidationProcess
</UL>

<P><STRONG><a name="[106]"></a>aiInspectorInitAndBind</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, aivalidation.o(i.aiInspectorInitAndBind))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = aiInspectorInitAndBind &rArr; ai_inspector_bind_network &rArr; ai_network_inspect_init &rArr; core_utils_generate_network_signature &rArr; core_mem_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_mnetwork_get_private_handle
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_default_config
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_create
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_bind_network
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInspectorUnBind
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
</UL>

<P><STRONG><a name="[10c]"></a>aiInspectorSendReport</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, aivalidation.o(i.aiInspectorSendReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = aiInspectorSendReport &rArr; aiPbMgrWaitAck &rArr; pb_decode_delimited &rArr; pb_decode &rArr; pb_decode_noinit &rArr; decode_field &rArr; decode_static_field &rArr; pb_message_set_to_defaults &rArr; pb_field_set_to_default &rArr;  pb_message_set_to_defaults (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_get_report
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrWaitAck
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendResp
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAck
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
</UL>

<P><STRONG><a name="[10a]"></a>aiInspectorUnBind</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, aivalidation.o(i.aiInspectorUnBind))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = aiInspectorUnBind &rArr; ai_inspector_unbind_network &rArr; _inspector_unbind_network &rArr; ai_network_inspect_destroy &rArr; core_mem_free &rArr; core_mem_free_ &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_unbind_network
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbCmdNNRun
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInspectorInitAndBind
</UL>

<P><STRONG><a name="[6b]"></a>aiOnExecNode_cb</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, aivalidation.o(i.aiOnExecNode_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = aiOnExecNode_cb &rArr; aiPbMgrSendAiBuffer3 &rArr; aiPbMgrWaitAck &rArr; pb_decode_delimited &rArr; pb_decode &rArr; pb_decode_noinit &rArr; decode_field &rArr; decode_static_field &rArr; pb_message_set_to_defaults &rArr; pb_field_set_to_default &rArr;  pb_message_set_to_defaults (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwtReset
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwtGetCycles
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwtCyclesToFloatMs
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiPbMgrSendAiBuffer3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aivalidation.o(i.aiInspectorInitAndBind)
</UL>
<P><STRONG><a name="[71]"></a>buf_read</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pb_decode.o(i.buf_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = buf_read
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pb_decode.o(i.pb_istream_from_buffer)
<LI> pb_decode.o(i.pb_read)
</UL>
<P><STRONG><a name="[160]"></a>decode_callback_field</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, pb_decode.o(i.decode_callback_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = decode_callback_field &rArr; read_raw_value &rArr; pb_read &rArr;  pb_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_skip_field
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_make_string_substream
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_istream_from_buffer
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_close_string_substream
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_raw_value
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_field
</UL>

<P><STRONG><a name="[166]"></a>decode_field</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, pb_decode.o(i.decode_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = decode_field &rArr; decode_static_field &rArr; pb_message_set_to_defaults &rArr; pb_field_set_to_default &rArr;  pb_message_set_to_defaults (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_static_field
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_callback_field
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_noinit
</UL>

<P><STRONG><a name="[167]"></a>decode_static_field</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, pb_decode.o(i.decode_static_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = decode_static_field &rArr; pb_message_set_to_defaults &rArr; pb_field_set_to_default &rArr;  pb_message_set_to_defaults (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_make_string_substream
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_close_string_substream
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_message_set_to_defaults
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_field
</UL>

<P><STRONG><a name="[17a]"></a>iter_from_extension</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pb_decode.o(i.iter_from_extension))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iter_from_extension
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_begin
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_noinit
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_set_to_default
</UL>

<P><STRONG><a name="[81]"></a>pb_dec_bytes</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, pb_decode.o(i.pb_dec_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pb_dec_bytes &rArr; pb_read &rArr;  pb_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_read
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_decode.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>pb_dec_fixed32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pb_decode.o(i.pb_dec_fixed32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pb_dec_fixed32 &rArr; pb_decode_fixed32 &rArr; pb_read &rArr;  pb_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_fixed32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_decode.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>pb_dec_fixed64</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pb_decode.o(i.pb_dec_fixed64))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pb_dec_fixed64 &rArr; pb_decode_fixed64 &rArr; pb_read &rArr;  pb_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_fixed64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_decode.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>pb_dec_fixed_length_bytes</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, pb_decode.o(i.pb_dec_fixed_length_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pb_dec_fixed_length_bytes &rArr; pb_read &rArr;  pb_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_read
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint32
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_decode.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>pb_dec_string</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, pb_decode.o(i.pb_dec_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pb_dec_string &rArr; pb_read &rArr;  pb_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_read
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_decode.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>pb_dec_submessage</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, pb_decode.o(i.pb_dec_submessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pb_dec_submessage &rArr; pb_decode &rArr; pb_decode_noinit &rArr; decode_field &rArr; decode_static_field &rArr; pb_message_set_to_defaults &rArr; pb_field_set_to_default &rArr;  pb_message_set_to_defaults (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_make_string_substream
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_noinit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_close_string_substream
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_decode.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>pb_dec_svarint</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, pb_decode.o(i.pb_dec_svarint))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pb_dec_svarint &rArr; pb_decode_svarint &rArr; pb_decode_varint &rArr; pb_readbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_svarint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_decode.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>pb_dec_uvarint</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, pb_decode.o(i.pb_dec_uvarint))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pb_dec_uvarint &rArr; pb_decode_varint &rArr; pb_readbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_decode.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>pb_dec_varint</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, pb_decode.o(i.pb_dec_varint))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pb_dec_varint &rArr; pb_decode_varint &rArr; pb_readbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_decode.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>pb_decode_varint32_eof</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, pb_decode.o(i.pb_decode_varint32_eof))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pb_decode_varint32_eof &rArr; pb_readbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_readbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint32
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_tag
</UL>

<P><STRONG><a name="[191]"></a>pb_field_set_to_default</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, pb_decode.o(i.pb_field_set_to_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = pb_field_set_to_default &rArr;  pb_message_set_to_defaults (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_message_set_to_defaults
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_set_to_default
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iter_from_extension
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_message_set_to_defaults
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_set_to_default
</UL>

<P><STRONG><a name="[168]"></a>pb_message_set_to_defaults</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, pb_decode.o(i.pb_message_set_to_defaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pb_message_set_to_defaults &rArr; pb_field_set_to_default &rArr;  pb_message_set_to_defaults (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_next
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_begin
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_set_to_default
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_set_to_default
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_static_field
</UL>

<P><STRONG><a name="[18d]"></a>pb_readbyte</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pb_decode.o(i.pb_readbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pb_readbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_decode_varint32_eof
</UL>

<P><STRONG><a name="[161]"></a>read_raw_value</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, pb_decode.o(i.read_raw_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = read_raw_value &rArr; pb_read &rArr;  pb_read (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_read
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_callback_field
</UL>

<P><STRONG><a name="[169]"></a>encode_array</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, pb_encode.o(i.encode_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = encode_array &rArr; pb_encode_tag_for_field &rArr; pb_encode_tag &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_tag_for_field
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_varint
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_tag
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_basic_field
</UL>

<P><STRONG><a name="[16d]"></a>encode_basic_field</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, pb_encode.o(i.encode_basic_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = encode_basic_field &rArr; encode_array &rArr; pb_encode_tag_for_field &rArr; pb_encode_tag &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_tag_for_field
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_check_proto3_default_value
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_array
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_field
</UL>

<P><STRONG><a name="[16f]"></a>encode_field</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, pb_encode.o(i.encode_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = encode_field &rArr; encode_basic_field &rArr; encode_array &rArr; pb_encode_tag_for_field &rArr; pb_encode_tag &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_basic_field
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode
</UL>

<P><STRONG><a name="[16e]"></a>pb_check_proto3_default_value</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, pb_encode.o(i.pb_check_proto3_default_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = pb_check_proto3_default_value &rArr;  pb_check_proto3_default_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_next
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_field_iter_begin
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_check_proto3_default_value
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_check_proto3_default_value
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_basic_field
</UL>

<P><STRONG><a name="[8a]"></a>pb_enc_bytes</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pb_encode.o(i.pb_enc_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pb_enc_bytes &rArr; pb_encode_string &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_encode.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>pb_enc_fixed32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pb_encode.o(i.pb_enc_fixed32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pb_enc_fixed32 &rArr; pb_encode_fixed32 &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_fixed32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_encode.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>pb_enc_fixed64</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pb_encode.o(i.pb_enc_fixed64))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pb_enc_fixed64 &rArr; pb_encode_fixed64 &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_fixed64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_encode.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>pb_enc_fixed_length_bytes</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pb_encode.o(i.pb_enc_fixed_length_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pb_enc_fixed_length_bytes &rArr; pb_encode_string &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_encode.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>pb_enc_string</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pb_encode.o(i.pb_enc_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pb_enc_string &rArr; pb_encode_string &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_string
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_encode.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>pb_enc_submessage</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pb_encode.o(i.pb_enc_submessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = pb_enc_submessage &rArr; pb_encode_submessage &rArr; pb_encode &rArr; encode_field &rArr; encode_basic_field &rArr; encode_array &rArr; pb_encode_tag_for_field &rArr; pb_encode_tag &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_submessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_encode.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>pb_enc_svarint</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, pb_encode.o(i.pb_enc_svarint))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pb_enc_svarint &rArr; pb_encode_svarint &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_svarint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_encode.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>pb_enc_uvarint</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, pb_encode.o(i.pb_enc_uvarint))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pb_enc_uvarint &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_varint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_encode.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>pb_enc_varint</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, pb_encode.o(i.pb_enc_varint))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pb_enc_varint &rArr; pb_encode_varint &rArr; pb_write
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pb_encode_varint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pb_encode.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>CRC_Lock</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ai_platform_interface.o(i.CRC_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_runtime_get_version
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_runtime_get_revision
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_interface_api_get_version
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_version
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
</UL>

<P><STRONG><a name="[d7]"></a>_ai_platform_get_io_buffers_info</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, ai_platform_interface.o(i._ai_platform_get_io_buffers_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_to_buffer_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_api_get_network_report
</UL>

<P><STRONG><a name="[ef]"></a>_platform_network_io_bind</STRONG> (Thumb, 526 bytes, Stack size 48 bytes, ai_platform_interface.o(i._platform_network_io_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _platform_network_io_bind &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_to_buffer_fmt
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_byte_size
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[f0]"></a>_platform_network_state_setup</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, ai_platform_interface.o(i._platform_network_state_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _platform_network_state_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[f2]"></a>_platform_network_state_update_input</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ai_platform_interface.o(i._platform_network_state_update_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _platform_network_state_update_input
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[f3]"></a>_platform_network_state_update_output</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ai_platform_interface.o(i._platform_network_state_update_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _platform_network_state_update_output
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[13c]"></a>ai_conv2d_kernel_depthwise_f32</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, layers_conv2d_generic_float.o(i.ai_conv2d_kernel_depthwise_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ai_conv2d_kernel_depthwise_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_kernel_f32
</UL>

<P><STRONG><a name="[139]"></a>ai_conv2d_kernel_f32</STRONG> (Thumb, 178 bytes, Stack size 104 bytes, layers_conv2d_generic_float.o(i.ai_conv2d_kernel_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = ai_conv2d_kernel_f32 &rArr; ai_conv2d_kernel_group_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_kernel_simple_f32
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_kernel_group_f32
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_kernel_depthwise_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_stripe_f32
</UL>

<P><STRONG><a name="[13a]"></a>ai_conv2d_kernel_group_f32</STRONG> (Thumb, 350 bytes, Stack size 76 bytes, layers_conv2d_generic_float.o(i.ai_conv2d_kernel_group_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ai_conv2d_kernel_group_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_kernel_f32
</UL>

<P><STRONG><a name="[13b]"></a>ai_conv2d_kernel_simple_f32</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, layers_conv2d_generic_float.o(i.ai_conv2d_kernel_simple_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ai_conv2d_kernel_simple_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_kernel_f32
</UL>

<P><STRONG><a name="[13d]"></a>ai_conv2d_stripe_f32</STRONG> (Thumb, 140 bytes, Stack size 104 bytes, layers_conv2d_generic_float.o(i.ai_conv2d_stripe_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ai_conv2d_stripe_f32 &rArr; ai_conv2d_kernel_f32 &rArr; ai_conv2d_kernel_group_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_kernel_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d_nl_pool
</UL>

<P><STRONG><a name="[15b]"></a>core_nl_get_params_byte_size</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, layers_conv2d_generic_float.o(i.core_nl_get_params_byte_size))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_byte_size
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d_nl_pool
</UL>

<P><STRONG><a name="[170]"></a>core_nl_get_params_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, layers_conv2d_generic_float.o(i.core_nl_get_params_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d_nl_pool
</UL>

<P><STRONG><a name="[171]"></a>core_nl_get_params_stride</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, layers_conv2d_generic_float.o(i.core_nl_get_params_stride))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d_nl_pool
</UL>

<P><STRONG><a name="[70]"></a>func_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, layers_conv2d_generic_float.o(i.func_dummy))
<BR>[Address Reference Count : 1]<UL><LI> layers_conv2d_generic_float.o(i.forward_conv2d_nl_pool)
</UL>
<P><STRONG><a name="[175]"></a>ai_shape_get_size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, layers_nl_generic_float.o(i.ai_shape_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_sm
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_relu
</UL>

<P><STRONG><a name="[141]"></a>_inspector_find_entry</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ai_network_inspector.o(i._inspector_find_entry))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_unbind_network
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_get_report
</UL>

<P><STRONG><a name="[ed]"></a>_inspector_unbind_network</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ai_network_inspector.o(i._inspector_unbind_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _inspector_unbind_network &rArr; ai_network_inspect_destroy &rArr; core_mem_free &rArr; core_mem_free_ &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_mem_free
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_inspect_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_unbind_network
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_inspector_destroy
</UL>

<P><STRONG><a name="[144]"></a>ai_forward_layer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, layers.o(i.ai_forward_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_forward_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_forward_all
</UL>

<P><STRONG><a name="[158]"></a>core_mem_free_</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, core_mem_manager.o(i.core_mem_free_))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = core_mem_free_ &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_mem_unmarshal_
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_mem_free
</UL>

<P><STRONG><a name="[159]"></a>core_mem_unmarshal_</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, core_mem_manager.o(i.core_mem_unmarshal_))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_mem_free_
</UL>

<P><STRONG><a name="[db]"></a>_check_array_flags_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, core_net_inspect.o(i._check_array_flags_set))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_forward_validate
</UL>

<P><STRONG><a name="[e3]"></a>_core_inspect_net_activations</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, core_net_inspect.o(i._core_inspect_net_activations))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _core_inspect_net_activations &rArr; core_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layer_type_name
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_timer_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_tensor_list
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_inspect_init
</UL>

<P><STRONG><a name="[df]"></a>_core_inspect_set_buffer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, core_net_inspect.o(i._core_inspect_set_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _core_inspect_set_buffer &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_to_buffer_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_forward_validate
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_snapshot_init_report_node
</UL>

<P><STRONG><a name="[e8]"></a>_core_inspect_snapshot_callback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, core_net_inspect.o(i._core_inspect_snapshot_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _core_inspect_snapshot_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_inspect_destroy
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_snapshot_push
</UL>

<P><STRONG><a name="[e7]"></a>_core_inspect_snapshot_init_report_node</STRONG> (Thumb, 330 bytes, Stack size 96 bytes, core_net_inspect.o(i._core_inspect_snapshot_init_report_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _core_inspect_snapshot_init_report_node &rArr; _core_inspect_set_buffer &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_byte_size
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_set_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_snapshot_push
</UL>

<P><STRONG><a name="[d9]"></a>_core_inspect_snapshot_push</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, core_net_inspect.o(i._core_inspect_snapshot_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = _core_inspect_snapshot_push &rArr; _core_inspect_snapshot_init_report_node &rArr; _core_inspect_set_buffer &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_mem_free
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_mem_alloc
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_snapshot_init_report_node
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_snapshot_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_forward_validate
</UL>

<P><STRONG><a name="[e4]"></a>_core_inspect_tensor_list</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, core_net_inspect.o(i._core_inspect_tensor_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _core_inspect_tensor_list
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_byte_size
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_inspect_net_activations
</UL>

<P><STRONG><a name="[15e]"></a>serialize_signature_buffer_</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, core_utils.o(i.serialize_signature_buffer_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = serialize_signature_buffer_
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_utils_generate_network_signature
</UL>

<P><STRONG><a name="[eb]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ce]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[f5]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f4]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d6]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
